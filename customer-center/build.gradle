// buildscript 代码块中脚本优先执行
buildscript {
    // ext 用于定义动态属性
    ext {
        springBootVersion = '2.3.4.RELEASE'
        springCloudVersion= 'Hoxton.SR8'
        springCloudAlibabaVersion= '2.1.1.BUILD-SNAPSHOT'
        nacosVersion = '2.2.3.RELEASE'
        sentinelVersion = '2.2.3.RELEASE'
        springloadedVersion = '1.2.8.RELEASE'
        lombokVersion= '1.18.14'
        sentinelDatasourceNacosVersion = '1.8.0'
    }

    //仓库管理
    repositories {
        // 本地maven仓库
        mavenLocal()
        //自定义maven仓库地址
        maven {
            url = 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        mavenCentral()
        google()
        //和maven中央仓库一样的另一个依赖管理仓库,主要是java
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    /**
     * api 用于取代compile(已被废弃)
     * api或compile关键字引用的包对于其他module来说是可见的，
     * implementation关键字引用的包对于其他module来说是不可见的。
     */
    //项目依赖
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //配置热部署
        classpath ("org.springframework:springloaded:${springloadedVersion}")
    }
}

group 'com.springcloud'
version '1.0'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
        // 解决cloud零散jar的版本问题
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
    }
}

// 配置该项目特有的依赖
dependencies {
    compile project(':kernel:kernel-common')
    //如果要做jar包分离，此处必须要使用compile,不然系统启动失败，血的教训
    compile(
            //springboot 依赖
            "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            "org.springframework.boot:spring-boot-devtools:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion",
            // Log4j2
            "org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-amqp",
//            "org.springframework.session:spring-session-data-redis:${redisVersion}",
            //spring cloud alibaba 依赖
            // nacos 服务中心依赖
            "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:$nacosVersion",
            //整合 sentinel
            "com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel:$sentinelVersion",
            "com.alibaba.csp:sentinel-datasource-nacos:$sentinelDatasourceNacosVersion"
    )
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    //lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
}

configurations {
    // 所有需要忽略的包定义在此
    //移除spring boot 默认logger依赖
    all*.exclude module: 'spring-boot-starter-logging'
}

// 清除现有的lib目录
task clearJar(type: Delete) {
    delete "$buildDir/libs/lib"
}

// 将依赖包复制到lib目录
task copyJar(type: Copy, dependsOn: 'clearJar') {
    from configurations.compileClasspath
    into "$buildDir/libs/lib"
}

bootJar {
    // 例外所有的jar
    excludes = ["*.jar"]
    // lib目录的清除和复制任务
    dependsOn clearJar
    dependsOn copyJar

    // 指定依赖包的路径
    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
}
